---
swagger: "2.0"
info:
  description: "ThreeSixty images API service definition"
  version: "1.0.0"
  title: "ThreeSixty Service"
  contact:
    email: "kontakt@bartoszzawadka.pl"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/"
tags:
- name: "images"
  description: "Images calls"
- name: "chunks"
  description: "Image segments calls"
schemes:
- "http"
paths:
  /images:
    get:
      tags:
      - "images"
      summary: "Searches images"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ images in the system\n"
      operationId: "getImages"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 50
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Image"
        400:
          description: "bad input parameter"
      x-swagger-router-controller: "Images"
    x-swagger-router-controller: "Chunks"
  /image/{id}:
    get:
      tags:
      - "images"
      summary: "Find image by id"
      description: "Returns a single image info with chunks ids"
      operationId: "getImageById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of image to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Image"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Image not found"
      x-swagger-router-controller: "Images"
    x-swagger-router-controller: "Chunks"
  /image:
    post:
      tags:
      - "images"
      summary: "Insert new image"
      description: ""
      operationId: "addImage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Image data for new item"
        required: true
        schema:
          $ref: "#/definitions/Image"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ImageInsertElement"
        400:
          description: "Invalid image data"
      x-swagger-router-controller: "Images"
    x-swagger-router-controller: "Chunks"
  /chunk/{id}:
    get:
      tags:
      - "chunks"
      summary: "Find chunk by id"
      description: "Returns a single chunk of 360 image by ID"
      operationId: "getChunkById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of image chunk to return"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chunk"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Image chunk not found"
      x-swagger-router-controller: "Chunks"
    post:
      tags:
      - "chunks"
      summary: "Add chunk to image"
      description: "Insert new chunk of specified image"
      operationId: "addChunk"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Chunk object data to be added to specified image"
        required: true
        schema:
          $ref: "#/definitions/Chunk"
      - name: "id"
        in: "path"
        description: "ID of existing image"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Chunk"
        400:
          description: "Invalid image ID"
        405:
          description: "Invalid input"
      x-swagger-router-controller: "Chunks"
    x-swagger-router-controller: "Chunks"
definitions:
  ImageInsertElement:
    type: "object"
    required:
    - "chunkHeight"
    - "chunkWidth"
    - "name"
    properties:
      name:
        type: "string"
        example: "Sample image"
      chunkWidth:
        type: "integer"
        format: "int32"
        example: 640
      chunkHeight:
        type: "integer"
        format: "int32"
        example: 480
  Image:
    type: "object"
    required:
    - "chunkHeight"
    - "chunkWidth"
    - "name"
    properties:
      id:
        type: "string"
        example: "58a336a28c936621c8c7e0dc"
      name:
        type: "string"
        example: "Sample image"
      createdAt:
        type: "string"
        format: "int32"
        example: "2016-08-29T09:12:33.001Z"
      chunksCount:
        type: "integer"
        format: "int32"
        example: 15
      chunkWidth:
        type: "integer"
        format: "int32"
        example: 640
      chunkHeight:
        type: "integer"
        format: "int32"
        example: 480
      chunks:
        type: "array"
        items:
          $ref: "#/definitions/ChunkListElement"
  ChunkListElement:
    type: "object"
    required:
    - "index"
    properties:
      index:
        type: "integer"
        format: "int32"
        example: 43
      id:
        type: "string"
        example: "58a336a28c936621c8c7e0dc"
      mimeType:
        type: "string"
        example: "image/png"
  Chunk:
    type: "object"
    required:
    - "index"
    properties:
      index:
        type: "integer"
        format: "int32"
        example: 43
      id:
        type: "string"
        example: "58a336a28c936621c8c7e0dc"
      mimeType:
        type: "string"
        example: "image/png"
      data:
        type: "string"
        format: "base64"
        example: "SWRlYWx5IHNhIGphayBnd2l..."
